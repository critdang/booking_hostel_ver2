const userId = req.client.id;
    const payment = req.query.payment || 'cash';
    const { cartId } = req.params;
    const t = await sequelize.transaction();

    let items = await Cart.findOne({
        where: { userId, id: cartId },
        include: [{
            model: cartProduct,
            as: 'products',
            attributes: ['quantity', 'cartId', 'id'],
            include: [{
                model: Product,
                as: 'details',
                attributes: ['id', 'name', 'description', 'amount', 'price']
            }]
        },
        { model: User, as: 'user' }
        ]
    });

    let orders = [];

    try {
        if (items.products) {
            let temp = new Date();
            let completedDay = null;

            if (payment === 'visa') {
                completedDay = formatDay(temp);
            }
            const invoice = await Invoice.create({ userId, status: PENDING_PAYMENT, completedDay, payment }, { transaction: t });

            const promises = [];
            items.products.forEach(product => {
                if (product.quantity > product.details.amount) {
                    t.rollback();
                    return res.send({ message: 'Product quantity exceed', status: 400 });
                }
                let obj = {};
                const p = new Promise((resolve, reject) => {
                    obj['orderId'] = invoice.id;
                    obj['quantity'] = product.quantity;
                    obj['total'] = product.quantity * product.details.price;
                    obj['productId'] = product.details.id;
                    obj['productName'] = product.details.name;
                    obj['completedDay'] = completedDay;
                    obj['payment'] = payment;
                    obj['price'] = product.details.price;

                    orders.push(obj);
                    Product.findOne({ where: { id: product.details.id } })
                        .then(result => {
                            result.set({ amount: result.amount - product.quantity });
                            result.save()
                                .then(() => {
                                    console.log('updated');
                                });
                        });
                    productInInvoice.create(obj, { transaction: t })
                        .then(() => cartProduct.destroy({ where: { productId: product.details.id } }, { transaction: t }))
                        .then(() => resolve("done"))
                        .catch(error => reject(error));
                });

                promises.push(p);

            });
            await Promise.all(promises);

            await t.commit();
            await checkoutReminder(items.user.email, orders);
            return res.status(200).json(orders);
        } else {
            return res.status(400).json({ msg: 'No product in cart' });
        }
    } catch (error) {
        await t.rollback();
        return res.send({ status: 400, message: error });
    }